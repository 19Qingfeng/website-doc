(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{414:function(a,t,s){"use strict";s.r(t);var e=s(42),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"urlsearchparams"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#urlsearchparams"}},[a._v("#")]),a._v(" urlSearchParams")]),a._v(" "),s("p",[s("strong",[a._v("!!!会自动转译,decodeURL")]),a._v("等我验证，应该是")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),s("p",[a._v("urlSearchParams 定义了使用 URL 的查询字符串的实用方法，但它兼容性不太好。")]),a._v(" "),s("p",[a._v("而 FormData 接口提供了一种方法，可以轻松地构造一组表示表单字段及其值的键/值对，通常用在 Post 请中。")]),a._v(" "),s("p",[a._v("urlSearchParams 和 FormData 完全是两个不同的东西。")]),a._v(" "),s("p",[a._v("在请求体中携带urlSearchParams时\b使用toString()方法转化后会得到key=value形式的参数，这和formData发送请求时携带的参数类似。但是urlSearchParams并不局限于此功能，他还提供了解析这类 queryString以及很多解析Url使用功能。")])]),a._v(" "),s("h2",{attrs:{id:"使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[a._v("#")]),a._v(" 使用场景")]),a._v(" "),s("ol",[s("li",[a._v("场景一 获取浏览器地址参数")])]),a._v(" "),s("p",[a._v("我们之前在获取浏览器地址参数时很多时候是通过对地址进行分割，然后拼接字段对象的方式来做的，类似")]),a._v(" "),s("blockquote",[s("p",[a._v("自己处理 location.search 进行截取获取 url 查询参数。")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("GetRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" location"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('//获取url中"?"符后的字串')]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" theRequest "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("indexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"?"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("substr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    strs "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"&"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" strs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      theRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("strs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" strs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" theRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("但是我们如果使用"),s("code",[a._v("URLSearchParams")]),a._v("时就不用这么繁琐了")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("const params = new URLSearchParams(location.search)\nparams.get(key)\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("使用 URLSearchParams 处理 axios 发送的数据")])]),a._v(" "),s("p",[a._v("URLSearchParams 顾名思义，其实就是 URL 添加查询参数。")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),s("p",[a._v("需要注意 xhr 发送请求时携带 URLSearchParams 时，请求头 Content-Type 通常配合 application/x-www-form-urlencoded。(axios 默认会如此处理)")])]),a._v(" "),s("p",[a._v("在我们使用 axios 和 fetch 来替换之前的 ajax 进行数据请求时，我们会遇到数据格式不一致的问题。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("axios({\n    method: 'post',\n    url: '/test',\n    data: {\n        name: 'li lei',\n        age: 18\n    }\n})\n")])])]),s("p",[a._v("上面的调用方法和我们使用 ajax 时非常相似，我们可能也会自然而然的这样来写，但是我们会发现，其默认的数据格式是有差别的：\n"),s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/7/16a91491e8cb50ac?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"request payload"}}),a._v("\najax 数据格式：\n"),s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/7/16a91491e9d58899?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"formData"}}),a._v("\n是的，多了一层包裹，这样和我们后端的对接就出现问题了。哪怕是手动去修改 ContentType 为 application/x-www-form-urlencoded 仍然没有解决。\n"),s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/7/16a91491e8e0e041?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"png"}})]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),s("p",[a._v("请求中使用 URLSearchParams 参数，会将请求数据格式为 formdata 形式。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let params = new URLSearchParams();\nparams.append('name', 'li lei');\nparams.append('age', 18);\n\n// axios中如果传递的是一个URLSearchParams的话，那么自动会调用URLSearchParams.toString()之后进行拼接。\naxios({\n    method: 'post',\n    url: '/test',\n    data: params\n})\n")])])]),s("h2",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[a._v("#")]),a._v(" api")]),a._v(" "),s("ul",[s("li",[a._v("append(name, value):插入一个指定的键/值对作为新的搜索参数。")])]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://example.com?foo=1&bar=2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" params "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("URLSearchParams")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("search"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//添加第二个foo搜索参数。")]),a._v("\nparams"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nparams"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 'foo=1&bar=2&foo=4'")]),a._v("\n")])])]),s("ul",[s("li",[a._v("delete(name):从搜索参数列表里删除指定的搜索参数及其对应的值。\nname 是需要删除的键值名称。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let url = new URL('https://example.com?foo=1&bar=2');\nlet params = new URLSearchParams(url.search.slice(1));\n\n//添加第二个foo搜索参数。\nparams.delete('foo');\nparams.toString();\n// 'bar=2'\n")])])]),s("ul",[s("li",[a._v("entries():返回一个 iterator 可以遍历所有键/值对的对象。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("// 创建一个测试用 URLSearchParams 对象\nlet searchParams = new URLSearchParams(\"key1=value1&key2=value2\");\n\n// 显示键/值对\nfor(var pair of searchParams.entries()) {\n   console.log(pair[0]+ ', '+ pair[1]);\n}\n\n// key1, value1\n// key2, value2\n")])])]),s("ul",[s("li",[a._v("get(name):获取指定搜索参数的第一个值。\nname 是将要返回的参数的键名。返回一个 USVString；如果没有，则返回 null。\n如果一个页面的 URL 是 https://example.com/?name=Jonathan&age=18 ，你可以这样解析参数 name 和 age:")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('let params = new URLSearchParams(document.location.search.substring(1));\nlet name = params.get("name"); // is the string "Jonathan"\nlet age = parseInt(params.get("age"), 10); // is the number 18\n\n// 查找一个不存在的键名则返回 null:\nlet address = params.get("address"); // null\n')])])]),s("ul",[s("li",[a._v("getAll(name):获取指定搜索参数的所有值，返回是一个数组。\nname 是返回的参数的名称。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let url = new URL('https://example.com?foo=1&bar=2');\nlet params = new URLSearchParams(url.search.slice(1));\n\n//为foo参数添加第二个值\nparams.append('foo', 4);\n\nconsole.log(params.getAll('foo'))' //输出 [\"1\",\"4\"].\n")])])]),s("ul",[s("li",[a._v("has(name):返回 Boolean 判断是否存在此搜索参数。\nname 是我们要查询的参数的键名。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let url = new URL('https://example.com?foo=1&bar=2');\nlet params = new URLSearchParams(url.search.slice(1));\n\nparams.has('bar') === true; //true\n")])])]),s("ul",[s("li",[a._v("keys():返回 iterator 此对象包含了键/值对的所有键名。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// 建立一个测试用URLSearchParams对象\nlet searchParams = new URLSearchParams("key1=value1&key2=value2");\n\n// 输出键值对\nfor(var key of searchParams.keys()) {\n  console.log(key);\n}\n\n// key1\n// key2\n')])])]),s("ul",[s("li",[a._v("set(name, value):设置一个搜索参数的新值，假如原来有多个值将删除其他所有的值。\n其中 name 是需要插入修改参数的键名，value 是需要插入搜索参数的新值。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let url = new URL('https://example.com?foo=1&bar=2');\nlet params = new URLSearchParams(url.search.slice(1));\n\n//Add a third parameter.\nparams.set('baz', 3);\n")])])]),s("ul",[s("li",[a._v("sort(): 按键名排序。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// Create a test URLSearchParams object\nlet searchParams = new URLSearchParams("c=4&a=2&b=3&a=1");\n\n// Sort the key/value pairs\nsearchParams.sort();\n\n// Display the sorted query string\nconsole.log(searchParams.toString());\n\n// a=2&a=1&b=3&c=4\n')])])]),s("ul",[s("li",[a._v("toString():返回搜索参数组成的字符串，可直接使用在 URL 上。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("let url = new URL('https://example.com?foo=1&bar=2');\nlet params = new URLSearchParams(url.search.slice(1));\n\n//Add a second foo parameter.\nparams.append('foo', 4);\nconsole.log(params.toString());\n//Prints 'foo=1&bar=2&foo=4'.\n")])])]),s("ul",[s("li",[a._v("values():返回 iterator 此对象包含了键/值对的所有值。")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// 创建一个测试用URLSearchParams对象\nlet searchParams = new URLSearchParams("key1=value1&key2=value2");\n\n// 输出值\nfor(var value of searchParams.values()) {\n  console.log(value);\n}\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);
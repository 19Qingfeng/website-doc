(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{445:function(n,e,s){"use strict";s.r(e);var t=s(42),r=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"http2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[n._v("#")]),n._v(" HTTP2")]),n._v(" "),s("h2",{attrs:{id:"http2-优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-优势"}},[n._v("#")]),n._v(" HTTP2 优势")]),n._v(" "),s("h3",{attrs:{id:"二进制传输"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制传输"}},[n._v("#")]),n._v(" 二进制传输")]),n._v(" "),s("p",[n._v("帧是数据传输的最小单位，以二进制传输代替原本的明文传输，原本的报文消息被划分为更小的数据帧。")]),n._v(" "),s("h3",{attrs:{id:"多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[n._v("#")]),n._v(" 多路复用")]),n._v(" "),s("h4",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[n._v("#")]),n._v(" 概念")]),n._v(" "),s("p",[n._v("HTTP1.1，在 keep-alive 中，必须等下上一个请求接受才能发起下一个请求，所以会收到前面请求的阻塞。")]),n._v(" "),s("p",[n._v("使用 pipe-line 可以连续发送一组没有相互依赖的请求而不比等到上一个请求先结束，看似 pipe-line 是个好东西，但是到目前为止我还没见过这种类型的连接，也间接说明这东西比较鸡肋。pipe-line 依然没有解决阻塞的问题，因为请求响应的顺序必须和请求发送的顺序一致，如果中间有某个响应花了很长的时间，后面的响应就算已经完成了也要排队等阻塞的请求返回，这就是线头阻塞。")]),n._v(" "),s("p",[n._v("http2 的多路复用就很好的解决了上面所提出的问题。"),s("strong",[n._v("http2 的传输是基于二进制帧的。每一个 TCP 连接中承载了多个双向流通的流，每一个流都有一个独一无二的标识和优先级，而流就是由二进制帧组成的。二进制帧的头部信息会标识自己属于哪一个流，所以这些帧是可以交错传输，然后在接收端通过帧头的信息组装成完整的数据。这样就解决了线头阻塞的问题，同时也提高了网络速度的利用率。")])]),n._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[n._v("TIP")]),n._v(" "),s("p",[n._v("http2 只能跑在 https 协议下。")])]),n._v(" "),s("h4",{attrs:{id:"生成自签名-https-证书"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成自签名-https-证书"}},[n._v("#")]),n._v(" 生成自签名 HTTPS 证书")]),n._v(" "),s("p",[s("code",[n._v("openssl genrsa -des3 -passout pass:x -out server.pass.key 2048")])]),n._v(" "),s("p",[s("code",[n._v("openssl rsa -passin pass:x -in server.pass.key -out server.key")])]),n._v(" "),s("p",[s("code",[n._v("openssl req -new -key server.key -out server.csr")])]),n._v(" "),s("p",[s("code",[n._v("openssl x509 -req -sha256 -days 3650 -in server.csr -signkey server.key -out server.crt")])]),n._v(" "),s("p",[n._v("根据上述四条命令生成自签发的 SSL 证书。")]),n._v(" "),s("p",[n._v("然后在 nginx 中进行配置生成的证书地址就可以了")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("        # 开启HTTPS\n        ssl on;\n\n        ssl_certificate      /Users/wanghaoyu/coder/crt/server.crt;\n        ssl_certificate_key  /Users/wanghaoyu/coder/crt/server.key;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n")])])]),s("h4",{attrs:{id:"nginx-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置"}},[n._v("#")]),n._v(" Nginx 配置")]),n._v(" "),s("ul",[s("li",[n._v("Server Push")])]),n._v(" "),s("ul",[s("li",[s("p",[n._v("http 2")])]),n._v(" "),s("li",[s("p",[n._v("多路复用(默认)")])])]),n._v(" "),s("h2",{attrs:{id:"nginx-前端配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-前端配置"}},[n._v("#")]),n._v(" Nginx 前端配置")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('    #keepalive_timeout  0;\n\n    keepalive_timeout  65;\n\n    keepalive_requests 100;\n\n\n\n    gzip on;\n\n\n\n    gzip_min_length 1k;\n\n\n\n    gzip_comp_level 6;\n\n\n\n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json;\n\n\n\n    gzip_static on;\n\n\n\n    gzip_vary on;\n\n\n\n    gzip_buffers 4 16k;\n\n\n\n   gzip_http_version 1.1;\n\n\n\nserver {\n\n        listen       8080;\n\n        server_name  localhost;\n\n\n\n        #charset koi8-r;\n\n\n\n        #access_log  logs/host.access.log  main;\n\n\n\n        location / {\n\n            root   /Users/your_username/foldername;\n\n            index  index.html index.htm;\n\n            try_files $uri /index.html;\n\n            if ($request_filename ~* .*\\.(?:htm|html)$)\n\n              {\n\n                add_header Cache-Control "no-cache, must-revalidate";\n\n                add_header "Pragma" "no-cache";\n\n                add_header "Expires" "0";\n\n              }\n\n             if ($request_filename ~* .*\\.(?:js|css)$)\n\n              {\n\n                expires      7d;\n\n              }\n\n             if ($request_filename ~* .*\\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$)\n\n              {\n\n                 expires      7d;\n\n              }\n\n        }\n\n\n\n        #error_page  404              /404.html;\n\n\n\n        # redirect server error pages to the static page /50x.html\n\n        #\n\n        error_page   500 502 503 504  /50x.html;\n\n        location = /50x.html {\n\n            root   html;\n\n        }\n\n\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n\n        #\n\n        #location ~ \\.php$ {\n\n        #    proxy_pass   http://127.0.0.1;\n\n        #}\n\n\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\n        #\n\n        #location ~ \\.php$ {\n\n        #    root           html;\n\n        #    fastcgi_pass   127.0.0.1:9000;\n\n        #    fastcgi_index  index.php;\n\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n\n        #    include        fastcgi_params;\n\n        #}\n\n\n\n        # deny access to .htaccess files, if Apache\'s document root\n\n        # concurs with nginx\'s one\n\n        #\n\n        #location ~ /\\.ht {\n\n        #    deny  all;\n\n        #}\n\n    }\n\n\n\n\n\n\n\n\n\n# HTTPS server\n\n    #\n\n    server {\n\n        listen       443 ssl http2;\n\n        server_name  localhost;\n\n\n\n        ssl on;\n\n\n\n        ssl_certificate      /Users/your_username/foldername/ssl/server.crt;\n\n        ssl_certificate_key  /Users/your_username/foldername/ssl/server.key;\n\n\n\n        ssl_session_cache    shared:SSL:1m;\n\n        ssl_session_timeout  5m;\n\n\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n\n        ssl_prefer_server_ciphers  on;\n\n\n\n        location / {\n\n            root   /Users/your_username/foldername;\n\n            index  index.html index.htm;\n\n            try_files $uri /index.html;\n\n            http2_push /img/me0.jpg;\n\n            http2_push /img/me1.jpg;\n\n            http2_push /img/me2.jpg;\n\n        }\n\n    }\n\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);
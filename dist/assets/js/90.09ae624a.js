(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{444:function(s,e,t){"use strict";t.r(e);var r=t(42),a=Object(r.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"http2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[s._v("#")]),s._v(" HTTP2")]),s._v(" "),t("h2",{attrs:{id:"http2-优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http2-优势"}},[s._v("#")]),s._v(" HTTP2 优势")]),s._v(" "),t("h3",{attrs:{id:"二进制传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二进制传输"}},[s._v("#")]),s._v(" 二进制传输")]),s._v(" "),t("p",[s._v("帧是数据传输的最小单位，以二进制传输代替原本的明文传输，原本的报文消息被划分为更小的数据帧。")]),s._v(" "),t("h3",{attrs:{id:"多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[s._v("#")]),s._v(" 多路复用")]),s._v(" "),t("h4",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),t("p",[s._v("HTTP1.1，在 keep-alive 中，必须等下上一个请求接受才能发起下一个请求，所以会收到前面请求的阻塞。")]),s._v(" "),t("p",[s._v("使用 pipe-line 可以连续发送一组没有相互依赖的请求而不比等到上一个请求先结束，看似 pipe-line 是个好东西，但是到目前为止我还没见过这种类型的连接，也间接说明这东西比较鸡肋。pipe-line 依然没有解决阻塞的问题，因为请求响应的顺序必须和请求发送的顺序一致，如果中间有某个响应花了很长的时间，后面的响应就算已经完成了也要排队等阻塞的请求返回，这就是线头阻塞。")]),s._v(" "),t("p",[s._v("http2 的多路复用就很好的解决了上面所提出的问题。"),t("strong",[s._v("http2 的传输是基于二进制帧的。每一个 TCP 连接中承载了多个双向流通的流，每一个流都有一个独一无二的标识和优先级，而流就是由二进制帧组成的。二进制帧的头部信息会标识自己属于哪一个流，所以这些帧是可以交错传输，然后在接收端通过帧头的信息组装成完整的数据。这样就解决了线头阻塞的问题，同时也提高了网络速度的利用率。")])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("http2 只能跑在 https 协议下。")])]),s._v(" "),t("h4",{attrs:{id:"生成自签名-https-证书"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成自签名-https-证书"}},[s._v("#")]),s._v(" 生成自签名 HTTPS 证书")]),s._v(" "),t("p",[t("code",[s._v("openssl genrsa -des3 -passout pass:x -out server.pass.key 2048")])]),s._v(" "),t("p",[t("code",[s._v("openssl rsa -passin pass:x -in server.pass.key -out server.key")])]),s._v(" "),t("p",[t("code",[s._v("openssl req -new -key server.key -out server.csr")])]),s._v(" "),t("p",[t("code",[s._v("openssl x509 -req -sha256 -days 3650 -in server.csr -signkey server.key -out server.crt")])]),s._v(" "),t("p",[s._v("根据上述四条命令生成自签发的 SSL 证书。")]),s._v(" "),t("p",[s._v("然后在 nginx 中进行配置生成的证书地址就可以了")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("        # 开启HTTPS\n        ssl on;\n\n        ssl_certificate      /Users/wanghaoyu/coder/crt/server.crt;\n        ssl_certificate_key  /Users/wanghaoyu/coder/crt/server.key;\n\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n        ssl_prefer_server_ciphers  on;\n")])])]),t("h4",{attrs:{id:"nginx-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置"}},[s._v("#")]),s._v(" Nginx 配置")]),s._v(" "),t("ul",[t("li",[s._v("Server Push")])])])}),[],!1,null,null,null);e.default=a.exports}}]);
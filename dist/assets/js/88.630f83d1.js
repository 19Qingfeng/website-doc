(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{443:function(n,e,t){"use strict";t.r(e);var s=t(42),a=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"http-资源缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-资源缓存"}},[n._v("#")]),n._v(" HTTP 资源缓存")]),n._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching",target:"_blank",rel:"noopener noreferrer"}},[n._v("HTTP 缓存"),t("OutboundLink")],1),n._v("本质上就是为了提高资源重复访问的速度。")])]),n._v(" "),t("table",[t("thead",[t("tr",[t("th"),n._v(" "),t("th",[t("strong",[n._v("获取资源形式")])]),n._v(" "),t("th",[t("strong",[n._v("状态码")])]),n._v(" "),t("th",[t("strong",[n._v("发送请求到服务器")])])])]),n._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[n._v("强缓存")])]),n._v(" "),t("td",[n._v("从缓存取")]),n._v(" "),t("td",[n._v("200（from cache）")]),n._v(" "),t("td",[n._v("否，直接从缓存取")])]),n._v(" "),t("tr",[t("td",[t("strong",[n._v("协商缓存")])]),n._v(" "),t("td",[n._v("从缓存取")]),n._v(" "),t("td",[n._v("304（not modified）")]),n._v(" "),t("td",[n._v("是，正如其名，通过服务器来告知缓存是否可用")])])])]),n._v(" "),t("h2",{attrs:{id:"cache-control-expire"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-expire"}},[n._v("#")]),n._v(" Cache-Control/Expire")]),n._v(" "),t("p",[n._v("Cache-Control 叫做强缓存。")]),n._v(" "),t("blockquote",[t("p",[n._v("浏览器在请求某一资源时，会先获取该资源缓存的 header 信息，判断是否命中强缓存（cache-control 和 expires 信息），若命中直接从缓存中获取资源信息，包括缓存 header 信息；本次请求根本就不会与服务器进行通信。")])]),n._v(" "),t("h3",{attrs:{id:"强缓存相关-header-字段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存相关-header-字段"}},[n._v("#")]),n._v(" 强缓存相关 header 字段")]),n._v(" "),t("ul",[t("li",[n._v("expires，这是 http1.0 时的规范；它的值为一个绝对时间的 GMT 格式的时间字符串，如 Mon, 10 Jun 2015 21:31:12 GMT，如果发送请求的时间在 expires 之前，那么本地缓存始终有效，否则就会发送请求到服务器来获取资源")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("cache-control：max-age=number，这是 http1.1 时出现的 header 信息，主要是利用该字段的 max-age 值来进行判断，它是一个相对值；资源第一次的请求时间和 Cache-Control 设定的有效期，计算出一个资源过期时间，再拿这个过期时间跟当前的请求时间比较，如果请求时间在过期时间之前，就能命中缓存，否则就不行；cache-control 除了该字段外，还有下面几个比较常用的设置值：")]),n._v(" "),t("ul",[t("li",[n._v("no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在 ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("no-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。")])]),n._v(" "),t("li",[t("p",[n._v("public：可以被所有的用户缓存，包括终端用户和 CDN 等中间代理服务器(service worker 缓存)。")])]),n._v(" "),t("li",[t("p",[n._v("private：只能被终端用户的浏览器缓存，不允许 CDN 等中继缓存服务器对其缓存。")])])])])]),n._v(" "),t("blockquote",[t("p",[n._v("注意：如果 cache-control 与 expires 同时存在的话，cache-control 的优先级高于 expires")])]),n._v(" "),t("blockquote",[t("p",[n._v("Cache-Control:max-age=0(0 秒后缓存失效);设置成为 0 就表示第一次获取之后下一次缓存立即失效了，其实就和 no-cache 差不多的效果。")])]),n._v(" "),t("blockquote",[t("p",[n._v("Cache-Control:no-store;表示不使用缓存，直接向后台发送请求获取资源（强缓存和协商缓存都不会走）。")])]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[n._v("TIP")]),n._v(" "),t("p",[n._v("当当前资源没有命中强缓存的时候，此时就会去命中协商缓存。但是当使用"),t("code",[n._v("no-store")]),n._v("就会直接重新下载并不去会尝试查看是否命中协商缓存。")])]),n._v(" "),t("h2",{attrs:{id:"last-modified-if-modified-since"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-if-modified-since"}},[n._v("#")]),n._v(" Last-Modified + If-Modified-Since")]),n._v(" "),t("p",[n._v("二者的值都是 GMT 格式的时间字符串，具体过程：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 respone 的 header 加上 Last-Modified 的 header，这个 header 表示这个资源在服务器上的最后修改时间")])]),n._v(" "),t("li",[t("p",[n._v("浏览器再次跟服务器请求这个资源时，在 request 的 header 上加上 If-Modified-Since 的 header，这个 header 的值就是上一次请求时返回的 Last-Modified 的值")])]),n._v(" "),t("li",[t("p",[n._v("服务器再次收到资源请求时，根据浏览器传过来 If-Modified-Since 和资源在服务器上的最后修改时间判断资源是否有变化，如果没有变化则返回 304 Not Modified，但是不会返回资源内容；如果有变化，就正常返回资源内容。当服务器返回 304 Not Modified 的响应时，response header 中不会再添加 Last-Modified 的 header，因为既然资源没有变化，那么 Last-Modified 也就不会改变，这是服务器返回 304 时的 response header")])]),n._v(" "),t("li",[t("p",[n._v("浏览器收到 304 的响应后，就会从缓存中加载资源")])]),n._v(" "),t("li",[t("p",[n._v("如果协商缓存没有命中，浏览器直接从服务器加载资源时，Last-Modified 的 Header 在重新加载的时候会被更新，下次请求时，If-Modified-Since 会启用上次返回的 Last-Modified 值")])])]),n._v(" "),t("h2",{attrs:{id:"e-tag-if-none-match"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#e-tag-if-none-match"}},[n._v("#")]),n._v(" E-Tag + If-None-Match")]),n._v(" "),t("p",[n._v("这两个值是由服务器生成的每个资源的唯一标识字符串，只要资源有变化就这个值就会改变；其判断过程与 Last-Modified/If-Modified-Since 类似，与 Last-Modified 不一样的是，当服务器返回 304 Not Modified 的响应时，由于 ETag 重新生成过，response header 中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[n._v("TIP")]),n._v(" "),t("p",[n._v("关于"),t("code",[n._v("E-Tag")]),n._v("和"),t("code",[n._v("Last-Modified")]),n._v("区别有很多文章介绍了，这里就不做简介了。")]),n._v(" "),t("p",[n._v("同时出现时，"),t("code",[n._v("Etag")]),n._v("优先级会高于"),t("code",[n._v("Last-Modified")]),n._v("。")]),n._v(" "),t("p",[n._v("默认"),t("code",[n._v("nginx")]),n._v("开启"),t("code",[n._v("Etag")]),n._v("和"),t("code",[n._v("Last-Modified")]),n._v("这两个缓存策略。")])]),n._v(" "),t("h2",{attrs:{id:"nginx-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置"}},[n._v("#")]),n._v(" Nginx 配置")]),n._v(" "),t("h3",{attrs:{id:"html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html"}},[n._v("#")]),n._v(" html")]),n._v(" "),t("div",{staticClass:"language-JS extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[n._v(" # 缓存配置\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("$request_filename "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("~")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v("\\"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("?")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v("htm"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("|")]),n._v("html"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("$"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n                add_header Cache"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v("Control "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"no-cache, must-revalidate"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n                add_header "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Pragma"')]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"no-cache"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n                add_header "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Expires"')]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"0"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),t("p",[n._v("关于有关 html 文件的请求，一般我们都不希望"),t("code",[n._v("html")]),n._v("缓存。因为传统单页面前端应用，当"),t("code",[n._v("html")]),n._v("发生改变的时候我们都是希望它可以及时更新，(否则 html 缓存住了使用的旧的资源路径就展示的还是旧的页面)。")]),n._v(" "),t("p",[n._v("所以给"),t("code",[n._v("html")]),n._v("文件添加了"),t("code",[n._v("cache_control:no-cache")]),n._v("，"),t("strong",[n._v("让"),t("code",[n._v("html")]),n._v("直接走协商缓存，如果文件内容不发生改变那么就继续使用缓存，如果变化了(基于 webpack，html 中引用的 js，css 资源修改后文件名都会存在唯一的 hash，html 引用就会发生改变)，那么就无法命中协商缓存从而重新请求。")])]),n._v(" "),t("p",[t("code",[n._v("Pragma")]),n._v(" 和 "),t("code",[n._v("Expires:0")]),n._v("(立即过期)，都是对"),t("code",[n._v("cache-control")]),n._v("的兼容，他们都是告诉浏览器。每次需要"),t("code",[n._v("html")]),n._v("文件的时候，不需要浏览器缓存而是重新去服务端进行重新获取和验证(协商缓存)。")]),n._v(" "),t("h3",{attrs:{id:"js-css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-css"}},[n._v("#")]),n._v(" JS&CSS")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nif ($request_filename ~* .*\\.(?:js|css)$)\n\n              {\n\n                expires      7d;\n\n              }\n")])])]),t("p",[n._v("这里的意思是说对于"),t("code",[n._v("css")]),n._v("和"),t("code",[n._v("js")]),n._v("文件服务器告诉浏览器，强制缓存 7 天的时间。当然这个时间可以跟随项目实际情况进行设置。")]),n._v(" "),t("blockquote",[t("p",[n._v("其实这里的 css 和 js 的过期时间不设置也可以，因为现代 web 应用中如果 html 改变，伴随的"),t("code",[n._v("css")]),n._v("和"),t("code",[n._v("js")]),n._v("都会因为修改造成"),t("code",[n._v("webpack")]),n._v("打包后生成文件的"),t("code",[n._v("contenthash")]),n._v("改变(文件名改变)。那么网站上 html 引入的资源路径都变化了，给用户的一定是会最新的 html 指向的新文件 css 和 js 文件。")])]),n._v(" "),t("h3",{attrs:{id:"图片-视频"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片-视频"}},[n._v("#")]),n._v(" 图片/视频")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  if ($request_filename ~* .*\\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$)\n\n              {\n\n                 expires      7d;\n\n              }\n")])])]),t("p",[n._v("对于图片/视频资源，一般来说可以设置一个比较长的时间让浏览器去进行强缓存。因为视频/图片/字体资源一般都不会怎么变化，所以设置一个较长的缓存时间会加快访问速度的。")]),n._v(" "),t("h2",{attrs:{id:"nginx-demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nginx-demo"}},[n._v("#")]),n._v(" Nginx-Demo")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('#keepalive_timeout  0;\n\n    keepalive_timeout  65;\n\n    keepalive_requests 100;\n\n\n\n    gzip on;\n\n\n\n    gzip_min_length 1k;\n\n\n\n    gzip_comp_level 6;\n\n\n\n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json;\n\n\n\n    gzip_static on;\n\n\n\n    gzip_vary on;\n\n\n\n    gzip_buffers 4 16k;\n\n\n\n   gzip_http_version 1.1;\n\n\n\nserver {\n\n        listen       8080;\n\n        server_name  localhost;\n\n\n\n        #charset koi8-r;\n\n\n\n        #access_log  logs/host.access.log  main;\n\n\n\n        location / {\n\n            root   /Users/your_username/foldername;\n\n            index  index.html index.htm;\n\n            try_files $uri /index.html;\n\n            if ($request_filename ~* .*\\.(?:htm|html)$)\n\n              {\n\n                add_header Cache-Control "no-cache, must-revalidate";\n\n                add_header "Pragma" "no-cache";\n\n                add_header "Expires" "0";\n\n              }\n\n             if ($request_filename ~* .*\\.(?:js|css)$)\n\n              {\n\n                expires      7d;\n\n              }\n\n             if ($request_filename ~* .*\\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$)\n\n              {\n\n                 expires      7d;\n\n              }\n\n        }\n\n\n\n        #error_page  404              /404.html;\n\n\n\n        # redirect server error pages to the static page /50x.html\n\n        #\n\n        error_page   500 502 503 504  /50x.html;\n\n        location = /50x.html {\n\n            root   html;\n\n        }\n\n\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n\n        #\n\n        #location ~ \\.php$ {\n\n        #    proxy_pass   http://127.0.0.1;\n\n        #}\n\n\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n\n        #\n\n        #location ~ \\.php$ {\n\n        #    root           html;\n\n        #    fastcgi_pass   127.0.0.1:9000;\n\n        #    fastcgi_index  index.php;\n\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n\n        #    include        fastcgi_params;\n\n        #}\n\n\n\n        # deny access to .htaccess files, if Apache\'s document root\n\n        # concurs with nginx\'s one\n\n        #\n\n        #location ~ /\\.ht {\n\n        #    deny  all;\n\n        #}\n\n    }\n\n\n\n\n\n\n\n\n\n# HTTPS server\n\n    #\n\n    server {\n\n        listen       843 ssl http2;\n\n        server_name  localhost;\n\n\n\n        ssl on;\n\n\n\n        ssl_certificate      /Users/your_username/foldername/ssl/server.crt;\n\n        ssl_certificate_key  /Users/your_username/foldername/ssl/server.key;\n\n\n\n        ssl_session_cache    shared:SSL:1m;\n\n        ssl_session_timeout  5m;\n\n\n\n        ssl_ciphers  HIGH:!aNULL:!MD5;\n\n        ssl_prefer_server_ciphers  on;\n\n\n\n        location / {\n\n            root   /Users/your_username/foldername;\n\n            index  index.html index.htm;\n\n            try_files $uri /index.html;\n\n            http2_push /img/me0.jpg;\n\n            http2_push /img/me1.jpg;\n\n            http2_push /img/me2.jpg;\n\n        }\n\n    }\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{446:function(e,n,t){"use strict";t.r(n);var s=t(42),o=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"启用-keep-alive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启用-keep-alive"}},[e._v("#")]),e._v(" 启用 Keep Alive")]),e._v(" "),t("h2",{attrs:{id:"keep-alive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[e._v("#")]),e._v(" keep Alive")]),e._v(" "),t("h3",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),t("p",[t("code",[e._v("Http Keep Alive")]),e._v(" 它的作用是对于"),t("code",[e._v("http")]),e._v("请求的"),t("code",[e._v("tcp")]),e._v("链接进行复用。也就是说当首次请求和服务器进行 TCP 链接之后，接下里的所有请求就不需要额外的重复进行 TCP 链接了。")]),e._v(" "),t("blockquote",[t("p",[e._v("Http1.1 开始后，"),t("code",[e._v("Keep Alive")]),e._v("成为了默认配置，默认进行开启。")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2021/03/02/HLxjoVrE3WMeIwO.png",alt:"截屏2021-03-02 下午10.20.30.png"}})]),e._v(" "),t("p",[e._v("瀑布图中的"),t("code",[e._v("Initial connection")]),e._v("就是进行"),t("code",[e._v("TCP")]),e._v("链接的过程。")]),e._v(" "),t("p",[e._v("之后同一台服务器下的请求，就没有"),t("code",[e._v("Initial connection")]),e._v("这个过程了。实际上它进行"),t("code",[e._v("keep alive")]),e._v("启到的作用，对同一台服务器下的请求进行"),t("code",[e._v("tcp")]),e._v("链接的复用。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2021/03/02/H9PVNjZ2w5KFitA.png",alt:"截屏2021-03-02 下午10.23.33.png"}})]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("initial connection")]),e._v("是和服务器建立链接的时间，而"),t("code",[e._v("TTFB")]),e._v("是服务器收到请求后服务器处理请求(比如数据库查找，代码执行)所消耗的时间，不要混淆。")])]),e._v(" "),t("h3",{attrs:{id:"开启"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启"}},[e._v("#")]),e._v(" 开启")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://i.loli.net/2021/03/02/kwhceyGiRX6lCMu.jpg",alt:"1.jpg"}})]),e._v(" "),t("p",[e._v("检查是否开启"),t("code",[e._v("keep alive")]),e._v("非常简单，检查响应头中是否存在"),t("code",[e._v("Connection: keep-alive")]),e._v("。存在即是开启了"),t("code",[e._v("keep alive")]),e._v("。")]),e._v(" "),t("p",[e._v("查看"),t("code",[e._v("response header")]),e._v("有很多种方法，可以从浏览器来看也可以使用"),t("code",[e._v("cur")]),e._v("来看，比如：\n"),t("code",[e._v("cur -v [url]")]),e._v("就可以看到详细的请求返回信息。")]),e._v(" "),t("h3",{attrs:{id:"参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),t("p",[e._v("和"),t("code",[e._v("keep alive")]),e._v("相关的还有两个基于 nginx 重要的参数，这两个参数通常根据网站实际的请求量进行灵活配置。")]),e._v(" "),t("h4",{attrs:{id:"keepalive-timeout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keepalive-timeout"}},[e._v("#")]),e._v(" keepalive_timeout")]),e._v(" "),t("p",[t("strong",[t("code",[e._v("keepalive_timeout")]),e._v("表示超时时间")]),e._v("，当客户端和服务端建立起来"),t("code",[e._v("TCP")]),e._v("链接之后，使用"),t("code",[e._v("keepalive")]),e._v("保持了链接。但是如果一直不使用的话那么就需要超时关掉的，nginx 中默认被注释的是 0 表示不启用"),t("code",[e._v("keep Alive")]),e._v("等于每一个链接都需要单独重新建立"),t("code",[e._v("TCP")]),e._v("链接。")]),e._v(" "),t("p",[e._v("可以根据项目进行设置比如"),t("code",[e._v("keepalive_timeout: 65;")]),e._v(" 表示 65s 下如果没有使用"),t("code",[e._v("TCP")]),e._v("链接了那么就会断开关闭它。")]),e._v(" "),t("h4",{attrs:{id:"keepalive-requests"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keepalive-requests"}},[e._v("#")]),e._v(" keepalive_requests")]),e._v(" "),t("p",[t("code",[e._v("keepalive_requests 100;")])]),e._v(" "),t("p",[e._v("这个值的意思是说，当客户端和服务端建立起来一个"),t("code",[e._v("TCP")]),e._v("链接之后它会建立一个计数器，也就是"),t("strong",[e._v("利用当前已经建立的"),t("code",[e._v("TCP")]),e._v("链接一共可以发送多少个请求。")])]),e._v(" "),t("p",[e._v("比如上边的 100 表示，当建立起来"),t("code",[e._v("TCP")]),e._v("链接之后，100 个请求以内的都可以复用这个"),t("code",[e._v("TCP")]),e._v("链接，而到 101 的请求之后就得重新建立一个新的"),t("code",[e._v("TCP")]),e._v("链接了。")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("至于为什么要设置"),t("code",[e._v("timeout")]),e._v("和"),t("code",[e._v("request")]),e._v("，虽然"),t("code",[e._v("keepalive")]),e._v("的确好用，但是同样要考虑服务器的开销。每个用户都和服务器建立起一个"),t("code",[e._v("TCP")]),e._v("链接，如果用户规模非常大，那么服务器上和每个用户都得保持"),t("code",[e._v("TCP")]),e._v("链接，这样的开销也非常大。")]),e._v(" "),t("p",[e._v("当然这两个参数是根据项目详情进行配置的，比如淘宝网，淘宝一个首页加载远远超过 100 个请求数量，那么此时在配置 100 那么就明显是不合适的了。")])]),e._v(" "),t("h3",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[e._v("#")]),e._v(" Demo")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65; # 秒单位\n\n    keepalive_requests 1000; # keepAlive 建立保持链接数量 超过则断开重新建立\n\n    gzip  on; # 启动gzip\n\n    gzip_min_length 1k; # 对大于1K的文件才进行Gzip压缩\n\n    gzip_comp_level 6; # 压缩比率 1-9 越高压缩越小 但是对cpu消耗越高\n\n    # 开启gzip压缩文件类型\n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json;\n\n    gzip_static on; # 对于已经gzip压缩过的进行直接利用\n\n    gzip_vary on; # 它会在响应头部添加gzip的属性 以及告诉客户端启用了Gzip压缩\n\n    gzip_buffers 4 16k; # 优化压缩过程\n\n    gzip_http_version 1.1; # 压缩使用的http版本\n\n\n    server {\n        listen       8666;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   /Users/wanghaoyu/coder/nginx;\n            index  index.html index.htm;\n            # try_files $uri $uri/ /index.html;\n        }\n\n        location /v1 {\n            proxy_pass  http://lemon-chat.boochat.cn;\n            # try_files $uri $uri/ /index.html;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n    include servers/*;\n}\n\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);
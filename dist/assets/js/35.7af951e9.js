(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{389:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript变量机制和垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript变量机制和垃圾回收机制"}},[t._v("#")]),t._v(" JAVASCRIPT变量机制和垃圾回收机制")]),t._v(" "),a("h2",{attrs:{id:"变量机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量机制"}},[t._v("#")]),t._v(" 变量机制")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("基本类型值在内容中占据的固定大小的空间，所以才会存储在堆内存中。")])]),t._v(" "),a("li",[a("p",[t._v("从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本。")])]),t._v(" "),a("li",[a("p",[t._v("引用类型的值是对象。保存在堆内存中。")])]),t._v(" "),a("li",[a("p",[t._v("包含引用类型值的变量实际上并不是对象本身，而是一个指向该对象的指针。")])]),t._v(" "),a("li",[a("p",[t._v("从一个变量向另一个变量复制引用类型的值，复制的其实是指针的引用，因此两个变量最终都指向同一个对象。")])])]),t._v(" "),a("p",[t._v("所有变量都存在于一个执行环境(作用域)，这个执行环境决定了变量的生命周期，以及哪一个部分代码可以访问其中的变量。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("全局作用域，局部作用域。")])]),t._v(" "),a("li",[a("p",[t._v("每次进行入一个新的执行环境，都会创建一个用于搜索变量和函数的作用域链。")])])]),t._v(" "),a("h2",{attrs:{id:"垃圾回收机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制"}},[t._v("#")]),t._v(" 垃圾回收机制")]),t._v(" "),a("p",[t._v("JavaScript 是一门具有自动垃圾回头机制的的编程语言，开发一般无需刻意关心垃圾回收机制。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("标记清除法(现代浏览器):离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。")])]),t._v(" "),a("li",[a("p",[t._v('"标记清除"是目前逐句的垃圾回收算法，给当前不实用的值加上标记，然后在将其垃圾回收。')])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPerson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createPerson")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wang.haoyu"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手工解除引用")]),t._v("\nperson "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("注意:解除一个值的引用并不意味着自动回收该值所占用的内存。"),a("strong",[t._v("解除引用的真正作用是让值脱离执行环境，以便垃圾回收机器下次运行时将其回收。")])])]),t._v(" "),a("ul",[a("li",[t._v("另一中引用计数的方式，跟踪记录所有值被引用的次数。目前都不在使用了，他拥有一个巨大的缺陷就是对于循环引用的现象它永远无法释放内存空间。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);
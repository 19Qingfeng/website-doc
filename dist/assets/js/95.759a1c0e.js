(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{449:function(s,v,_){"use strict";_.r(v);var e=_(42),t=Object(e.a)({},(function(){var s=this,v=s.$createElement,_=s._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[_("h1",{attrs:{id:"图片加载优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图片加载优化"}},[s._v("#")]),s._v(" 图片加载优化")]),s._v(" "),_("blockquote",[_("p",[s._v("图片本身可以通过大小进行压缩。")])]),s._v(" "),_("p",[s._v("当图片本身就不是很大，但是我们的网页上却 🈶️ 需要很多种加载这样的图片。那么就需要考虑添加图片加载时候的优化。")]),s._v(" "),_("h2",{attrs:{id:"懒加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[s._v("#")]),s._v(" 懒加载")]),s._v(" "),_("p",[s._v("图片的懒加载是非常常见的，当页面有很多图片元素需要加载的时候，使用"),_("code",[s._v("lazy loading")]),s._v("是非常有效的图片加载优化。")]),s._v(" "),_("p",[s._v("当图片出现在用户屏幕可视范围内的时候，才加载对应的图片"),_("code",[s._v("src")]),s._v("。")]),s._v(" "),_("h3",{attrs:{id:"原生loading-lazy"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原生loading-lazy"}},[s._v("#")]),s._v(" 原生"),_("code",[s._v("loading='lazy'")])]),s._v(" "),_("p",[_("code",[s._v("img")]),s._v("标签的源生属性"),_("code",[s._v("loading='lazy'")]),s._v("可以达到懒加载的效果，当然源生属性的可拓展性不是特别好所以大多数情况下都是用一些第三方库进行实现图片懒加载。")]),s._v(" "),_("h2",{attrs:{id:"渐近式图片"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渐近式图片"}},[s._v("#")]),s._v(" 渐近式图片")]),s._v(" "),_("p",[_("img",{attrs:{src:"https://i.loli.net/2021/02/09/DjTzb5afhyZmstA.png",alt:"截屏2021-02-09 下午2.30.30.png"}})]),s._v(" "),_("p",[s._v("传统"),_("code",[s._v("jpg")]),s._v("使用的是一种基线加载方式，也就是行扫描进行加载(自上而下)。")]),s._v(" "),_("p",[s._v("还有另外一种方式就是渐进式的图片，是从模糊到慢慢清晰的加载方式。这种方式对于用户体验更好一些，需要在美工导出"),_("code",[s._v("jpg")]),s._v("的时候选择渐进式的图片格式。")]),s._v(" "),_("h3",{attrs:{id:"渐进式图片的优点和缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#渐进式图片的优点和缺点"}},[s._v("#")]),s._v(" 渐进式图片的优点和缺点")]),s._v(" "),_("p",[s._v("当然加载时间是和图片本身体积有关系的。")]),s._v(" "),_("h3",{attrs:{id:"自己实现渐进式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#自己实现渐进式"}},[s._v("#")]),s._v(" 自己实现渐进式")]),s._v(" "),_("p",[s._v("当然，有时候拿不到渐进式的图片(美工不会或者其他什么原因)。当然我们也可以自己去实现渐进式的图片，常用方式有很多第三方库可以完美的直接这些。")]),s._v(" "),_("ul",[_("li",[_("p",[s._v("progressive-image")])]),s._v(" "),_("li",[_("p",[s._v("imageMagick")])]),s._v(" "),_("li",[_("p",[s._v("libjpeg")])]),s._v(" "),_("li",[_("p",[s._v("jpegran")])]),s._v(" "),_("li",[_("p",[s._v("jpeg-recompress")])]),s._v(" "),_("li",[_("p",[s._v("imagemin")])])]),s._v(" "),_("p",[s._v("上边的库都可以很完美的实现渐进式图片加载的实现。")]),s._v(" "),_("h2",{attrs:{id:"响应式图片"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应式图片"}},[s._v("#")]),s._v(" 响应式图片")]),s._v(" "),_("h3",{attrs:{id:"srcset-属性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#srcset-属性"}},[s._v("#")]),s._v(" srcSet 属性")]),s._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6844903922109267976",target:"_blank",rel:"noopener noreferrer"}},[_("OutboundLink")],1)]),s._v(" "),_("p",[s._v("响应式图片主要通过"),_("code",[s._v("img")]),s._v("标签的"),_("code",[s._v("srcset")]),s._v("和"),_("code",[s._v("sizes")]),s._v("这两个属性控制:\n"),_("strong",[s._v("srcset")]),s._v("和"),_("strong",[s._v("sizes")]),s._v("，主要作用:")]),s._v(" "),_("p",[s._v("控制响应式图片，根据屏幕大小来选择显示不同图片\n根据屏幕的不同（视网膜屏幕还是普通屏），展示不同质量的图片，合理控制下载资源，以及带给用户高质量享受。")]),s._v(" "),_("ul",[_("li",[s._v("secset")])]),s._v(" "),_("p",[s._v("（1）格式一："),_("code",[s._v("图片源地址 空格 图片像素宽度[, 图片源地址 空格 图片像素宽度, ...]")]),s._v("，如\n"),_("code",[s._v('srcset="1.jpg 580w, 2.png 618w"')]),s._v("\n表示图片 1.jpg 的像素宽度为 580px，图片 2.png 的像素宽度为 618px，两个图片源之间用逗号隔开。")]),s._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),_("p",[s._v("千万注意：描述图片的像素宽度是用'w'单位，且一定要是图片的真实像素宽度，如果私自改动，那么会影响浏览器对图片的选择！")])]),s._v(" "),_("p",[s._v("其实上述例子类似给了个默认的 sizes 属性（具体下面再讲）\n"),_("code",[s._v('srcset="1.jpg 580w, 2.png 618w" sizes="100vw"')])]),s._v(" "),_("p",[s._v("（2）格式二："),_("code",[s._v("图片源地址 空格 屏幕像素密度[, 图片源地址 空格 屏幕像素密度, ...]")]),s._v("，如\n"),_("code",[s._v('srcset="1.jpg 1x, 2.png 2x"')]),s._v("\n表示图片 1.jpg 为 DPR 为 1 时下显示的图片；2.png 为 DPR 为 2 时显示的图片，如果没有更大的 DPR 设置的图片源，那么当大于当前设置的 DPR 最高值时，会采用当前设置的最大 DPR 的图片源。如这里如果屏幕 DPR 为 3，那么还是会用 2.png。")]),s._v(" "),_("p",[s._v("在浏览器支持 srcset 的情况下，src 值就成为了一个 1x 情况下的候选图片，在没有符合条件的情况下，会采用该值。")]),s._v(" "),_("p",[_("strong",[s._v("关于'x'(屏幕密度)的图片选择，很简单，按照上述规则就好了。但是关于'w'的图片选择，就没有那么单纯了，需要结合下述的 sizes 属性一起来分析。")])]),s._v(" "),_("ul",[_("li",[s._v("sizes")])]),s._v(" "),_("p",[s._v("只有当设置了"),_("code",[s._v("srcset")]),s._v("，且单位为"),_("code",[s._v("w")]),s._v("时，"),_("code",[s._v("sizes")]),s._v("的设置才会起效。浏览器到底是怎么选择图片的呢，"),_("strong",[s._v("是先根据"),_("code",[s._v("sizes")]),s._v("设定的条件下，找出此刻图片显示的宽度，然后根据这个宽度去"),_("code",[s._v("srcset")]),s._v("里找符合条件的图片。")])]),s._v(" "),_("p",[s._v("什么样的才是叫符合条件呢？")]),s._v(" "),_("blockquote",[_("p",[s._v("srcset 中设置的图片像素宽度（'w'的值），组成了相应的半开半闭区间(a, b]。 图片的显示宽度（sizes 规定的值）看落在哪个区间内，取区间中最大值对应的图片。若没有最大值（如 ∞），则取上个区间最大值。")]),s._v(" "),_("blockquote",[_("p",[s._v("简单来说，就是根据"),_("code",[s._v("sizes")]),s._v("属性结合对应的值(根据屏幕宽度以及设备密度比)算出对应图片"),_("code",[s._v("sizes")]),s._v("对应的尺寸根据对应尺寸去"),_("code",[s._v("srcset")]),s._v("进行匹配。")])])]),s._v(" "),_("p",[s._v("如\n"),_("code",[s._v('<img src="4.jpg" srcset="3.jpg 229w,2.png 618w,1.jpg 1000w", sizes="300px">')])]),s._v(" "),_("p",[s._v("上面设置图片要显示成 300px（sizes 里的值），在 srcset 里的几个临界值中形成了"),_("code",[s._v("(0, 229px]、(229px, 618px]、(618px, 1000px]、(1000px, ∞]。")]),s._v("300px 落在了"),_("code",[s._v("(229px, 618px]")]),s._v("中，取最大值 618，因此最终选择的图片就是 2.png。")]),s._v(" "),_("p",[s._v("如果 sizes 改成 1200px，按照上述规则，最终会选取 1000w 的 1.jpg\n注意：srcset 里的顺序不重要，不会受到影响。")]),s._v(" "),_("p",[s._v("好了，我们知道浏览器的选取规则。还是说一下 sizes 的语法结构：")]),s._v(" "),_("p",[_("code",[s._v("[媒体查询 空格 ]图片显示宽度[, [媒体查询 空格 ]图片显示宽], ..., 其余条件宽度值]")])]),s._v(" "),_("p",[s._v("图片的宽度值单位不能为%，其余正常单位可以使用\n举例：\n"),_("code",[s._v('sizes="(max-width: 500px) 400px, (max-width: 900px) 700px, 1200px"')])]),s._v(" "),_("p",[s._v("上面的意思就是，在屏幕小于等于 500px 情况下，图片显示成 400px 宽；在屏幕小于等于 900px 情况下，图片显示成 700px 宽；其余情况显示成 1200px 宽。\n因此，可根据这种 sizes 值，判断在哪个屏幕大小下显示什么宽度的图片，然后根据这个宽度值去 srcset 里找满足条件的图片源。")]),s._v(" "),_("p",[_("code",[s._v('<img src="4.jpg" srcset="3.jpg 229w,2.png 618w,1.jpg 1000w", sizes="(max-width: 500px) 400px, (max-width: 900px) 700px, 1200px">')])]),s._v(" "),_("p",[s._v("在屏幕小于等于 500px 情况下，图片显示成 400px 宽，选取 2.png；在屏幕小于等于 900px 情况下，图片显示成 700px 宽，选取 1.jpg；其余情况显示成 1200px 宽，还是选取 1.jpg。")]),s._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),_("p",[s._v("注意：sizes 里的媒体查询条件顺序是很重要的，只要满足了越靠前的某个条件，那么后面的条件会被忽略的")])]),s._v(" "),_("p",[s._v("还有，如果 sizes 属性没有值，或者在有媒体条件下，其余条件宽度没有设值，那么默认是 100vw")]),s._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v('<img src="4.jpg" srcset="3.jpg 229w,2.png 618w">\n\n\x3c!--等同于--\x3e\n\n<img src="4.jpg" srcset="3.jpg 229w,2.png 618w" sizes="100vw">\n')])])]),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v('<img src="4.jpg" srcset="3.jpg 229w,2.png 618w", sizes="(max-width: 500px) 400px">\n\n\x3c!--等同于--\x3e\n\n<img src="4.jpg" srcset="3.jpg 229w,2.png 618w", sizes="(max-width: 500px) 400px, 100vw">\n')])])]),_("p",[s._v("这种时候，就是直接根据屏幕的宽度来决定选取哪个图片源了。")]),s._v(" "),_("h4",{attrs:{id:"dpr-的影响"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dpr-的影响"}},[s._v("#")]),s._v(" DPR 的影响")]),s._v(" "),_("p",[s._v("上述内容，都是在 DPR 为 1 的情况下说明的，主要针对 PC 端吧。那如果是手机端，DPR 不单单是 1，还有 2，3 的情况。这时候其实上述内容的规则还是不会变的，但是我们需要做一些值的转化才能套用上述规则。这里主要是说'w'的情况下浏览器如何去选择")]),s._v(" "),_("p",[s._v("以该例子说明")]),s._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[s._v('<img src="4.jpg" srcset="3.jpg 229w,2.png 618w" sizes="(max-width: 600px) 114px">\n')])])]),_("p",[s._v("首先我们要知道，**srcset 里的'w'符号，是代表的是图像的宽度像素，是个物理像素；****sizes 里的 114px 是表示逻辑像素！*"),_("em",[s._v("(逻辑像素")]),s._v("DRP=对应的物理像素)")]),s._v(" "),_("p",[s._v("而浏览器对图片的选择，是要转化为同一概念上的像素才能进行对比的，总不能拿着逻辑像素值去物理像素区间里做比较吧？")]),s._v(" "),_("p",[s._v("因此，在 DPR 不为 1 时，要转化一下像素值才能去区间里比较，套用上述规则。\n如在 DPR=2 时，把 114px 转化为物理像素，即"),_("code",[s._v("114px * 2 = 228px")]),s._v("，用 228px 去"),_("code",[s._v("(0, 229px]、(229px, 618px]、(618px, ∞]")]),s._v("里做比较，落在了(0, 229px]中，取 229px 对应的 3.jpg")]),s._v(" "),_("h4",{attrs:{id:"规范"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#规范"}},[s._v("#")]),s._v(" 规范")]),s._v(" "),_("p",[s._v("如果你想用这两个属性好好控制图片，那你得遵循好以下规范，不然很多效果是你难以预测得到的，毕竟那么多浏览器，兼容性也各自不同。\n都是关于 srcset 的值的规范：")]),s._v(" "),_("ul",[_("li",[s._v("不同图片源，要都是同一个类型的，如都是'x'的描述，或都是'w'的描述。")]),s._v(" "),_("li",[s._v("不同图片源，不能是同一个值，如同'1x' 或 同 '900w'")]),s._v(" "),_("li",[s._v("同个图片源，不能既有'w'又有'x'")])]),s._v(" "),_("p",[s._v("用'w'描述时，一定一定要是图片真实的宽度值，你可以右键图片查看属性，看到其宽多少像素，就是这个像素值了。如果你不填写真实的情况，那么会影响浏览器对图片的选择，以及显示在浏览器上的图片的宽度也会进行一定比例缩放，比例为真实宽度:私自改动宽。")]),s._v(" "),_("p",[s._v("如果你不信这个规范，毕竟很多其他文章没这么要求限制，你难免会产生怀疑，虽然打破这些规范，浏览器可能也会显示某种规律，但是，考虑到浏览器的兼容性问题，实在不建议不按照上述要求写。\n【这块内容无关重要】\n以下是我亲测的一些情况。感兴趣的你自己也可以试试看，当然我这里测试的浏览器有限")]),s._v(" "),_("ul",[_("li",[s._v("srcset 值有不符合当前屏幕的'x'时，还有'w'时，会按照'w'的条件显示图片，其余情况会显示这个最小的不符合的'x'下的图片；但 360 会一直用这个最小的不符合的'w'值。")]),s._v(" "),_("li",[s._v("有符合的'w'又有符合的'x'，'x'的优先级最高。无论怎样都会显示'x'的条件下的图片")]),s._v(" "),_("li",[s._v("同个图片源，既有'w'又有'x'是无效的")]),s._v(" "),_("li",[s._v("不同图片源，同一个值，如同'1x' 或 同 '900w'，最前面的那个优先")])])])}),[],!1,null,null,null);v.default=t.exports}}]);
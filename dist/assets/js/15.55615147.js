(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{366:function(v,_,e){"use strict";e.r(_);var o=e(42),s=Object(o.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"web-加载-渲染基本原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web-加载-渲染基本原理"}},[v._v("#")]),v._v(" Web 加载&渲染基本原理")]),v._v(" "),e("h2",{attrs:{id:"从输入-url-到页面加载显示都完成了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从输入-url-到页面加载显示都完成了什么"}},[v._v("#")]),v._v(" 从输入 URL 到页面加载显示都完成了什么")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("UI 线程处理请求")])])]),v._v(" "),e("p",[e("strong",[v._v("首先，UI thread。UI 线程")])]),v._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2021/03/22/V3FTUW5u1ZAd7PC.png",alt:"截屏2021-03-22 下午9.30.19.png"}})]),v._v(" "),e("p",[v._v("实际上首先是通过浏览器的 UI 线程接受输入的内容进行处理。")]),v._v(" "),e("p",[v._v("现代浏览器地址栏有两种作用，一个是输入关键字进行搜索引擎搜索。另一个就是输入 URL 进行打开新页面。")]),v._v(" "),e("p",[v._v("所以第一步首先是 UI 线程进行判断，判断是站点还是默认搜索引擎关键字搜索。")]),v._v(" "),e("p",[v._v("接下来如果是一个 URL，才会进行 URL 的解析。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("UI 线程交给网络线程处理请求")])])]),v._v(" "),e("p",[e("strong",[v._v("接下来 UI 线程会通知网络线程"),e("code",[v._v("Network thread")])])]),v._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2021/03/22/mdpeKuAxFRztVk7.png",alt:"截屏2021-03-22 下午9.35.11.png"}})]),v._v(" "),e("p",[v._v("通过网络线程去发起请求，")]),v._v(" "),e("p",[v._v("网络线程第一步肯定是解析输入的域名，将域名解析为"),e("code",[v._v("IP")]),v._v("去访问服务器的 IP 地址。（通过 DNS 解析域名为 ip）")]),v._v(" "),e("blockquote",[e("p",[v._v("这里需要注意的是")]),v._v(" "),e("p",[v._v("当建立"),e("code",[v._v("https")]),v._v("链接的时候，"),e("code",[v._v("TCP")]),v._v("链接会相较于"),e("code",[v._v("HTTP")]),v._v("链接额外再次发起一次链接(多一次挥手)，协商"),e("code",[v._v("TLS")]),v._v("协商。")])]),v._v(" "),e("blockquote",[e("p",[v._v("当访问到得到 301 的时候，浏览器会重新再次发送请求去访问真正的地址。")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("网络线程将响应数据交给 "),e("code",[v._v("Renderer process")]),v._v("渲染进程")])])]),v._v(" "),e("p",[v._v("实际上前两步都是在"),e("code",[v._v("Browser Process")]),v._v("浏览器进程中去处理，这一步才到达"),e("code",[v._v("Renderer Process")]),v._v("渲染进程。")]),v._v(" "),e("p",[v._v("当浏览器进程将资源下载完毕准备好之后，会告诉渲染进程同时将数据传递给渲染进程。")]),v._v(" "),e("p",[v._v("之后页面"),e("code",[v._v("tab")]),v._v("的导航会及时更新以及处理历史记录然后开始渲染加载页面。")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2021/03/23/FrZoTWNni7qt1kU.png",alt:"截屏2021-03-23 下午2.47.05.png"}})]),v._v(" "),e("p",[e("strong",[v._v("浏览器渲染，"),e("code",[v._v("process thread")]),v._v("主进程开始渲染页面")])]),v._v(" "),e("ul",[e("li",[v._v("首先主进程拿到文本开始解析文本，解析节点成 DOM。也就是将文本节点解析成"),e("code",[v._v("AST")]),v._v("抽象语法树。")])]),v._v(" "),e("ul",[e("li",[v._v("同时对于 css，调用"),e("code",[v._v("css parse")]),v._v("解析"),e("code",[v._v("css om")]),v._v("。")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("需要注意的是碰到"),e("code",[v._v("js")]),v._v("是会阻塞"),e("code",[v._v("dom")]),v._v("和"),e("code",[v._v("cssom")]),v._v("的解析的。")]),v._v(" "),e("p",[v._v("但是如果标签存在"),e("code",[v._v("defer")]),v._v("/"),e("code",[v._v("async")]),v._v("属性就不会。")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("cssom")]),v._v("和"),e("code",[v._v("dom")]),v._v("解析完毕后会合成为"),e("code",[v._v("renderer Tree")]),v._v("。")])]),v._v(" "),e("blockquote",[e("p",[e("code",[v._v("renderer Tree")]),v._v("会排除"),e("code",[v._v("dom Tree")]),v._v("上的一些"),e("code",[v._v("display:none")]),v._v("的节点去。"),e("code",[v._v("renderer Tree")]),v._v("上就会包含节点信息内容以及对应的样式(大小，布局)。")])]),v._v(" "),e("p",[e("strong",[v._v("当"),e("code",[v._v("renderer Tree")]),v._v("构建完成之后主线程就会交给另外两个线程去执行。")])]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("raster thread")]),v._v("创建绘画记录，也就是规定哪些元素先画出来哪些后画。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("compositior Thread")]),v._v("将页面拆分成不同的图层，构建图层树。之后等待每一个图层绘画完毕后，合并(拼接)图层，页面就开始展示了。符合线程，像素画图层。")])])]),v._v(" "),e("h2",{attrs:{id:"js-css-阻塞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-css-阻塞"}},[v._v("#")]),v._v(" JS/CSS 阻塞")]),v._v(" "),e("p",[v._v("关于"),e("code",[v._v("renderer process")]),v._v("处理页面渲染时，会同时开启"),e("code",[v._v("css parse")]),v._v("和"),e("code",[v._v("dom parse")]),v._v("解析"),e("code",[v._v("cssom")]),v._v("和"),e("code",[v._v("dom")]),v._v("。")]),v._v(" "),e("p",[v._v("但是需要注意的是")]),v._v(" "),e("ol",[e("li",[e("p",[e("strong",[v._v("首先 HTML 解析在执行的时候，是当 HTML 解析器被脚本阻塞时，解析器虽然会停止构建"),e("code",[v._v("DOM")]),v._v("但是仍然会识别该脚本后的资源，并行加进行预加载（提前下载请求资源）。")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("CSS parse")]),v._v("和"),e("code",[v._v("Dom parse")]),v._v("是并行进行解析的，"),e("code",[v._v("Css")]),v._v("的解析并不会阻塞"),e("code",[v._v("dom")]),v._v("的解析，但是会阻塞页面的渲染。因为页面渲染是需要依赖"),e("code",[v._v("cssom dom")]),v._v("合成的"),e("code",[v._v("renderer Tree")]),v._v("，所以"),e("code",[v._v("css")]),v._v("会阻塞页面渲染。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("css")]),v._v("代码会阻塞"),e("code",[v._v("js")]),v._v("的执行，当"),e("code",[v._v("cssom")]),v._v("构建的时，"),e("code",[v._v("js")]),v._v("执行将会暂停。")])])])])}),[],!1,null,null,null);_.default=s.exports}}]);